name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      api:
        required: false
        default: false
        type: boolean
    secrets:
      CF_API:
        required: true
      CF_ORG:
        required: true
      CF_SPACE:
        required: true
      CF_USER:
        required: true
      CF_PASSWORD:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  testing-unit:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - name: install dependencies
        run: python -m pip install --upgrade pip && python -m pip install -r requirements.txt
      - name: run unit tests
        run: python -m pip install pytest && python -m pytest .

  testing:
    runs-on: ubuntu-latest
    environment: Dev
    needs: testing-unit
    if: ${{ inputs.api == false }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - name: install dependencies
        run: python -m pip install --upgrade pip && python -m pip install -r requirements.txt
      - name: build static assets
        run: python build.py
      - name: 'Upload build'
        uses: actions/upload-artifact@v2
        with:
          name: python-build
          path: app/static
          retention-days: 5
      - name: run unit tests
        run: python -m pip install pytest && python -m pytest .
      - name: Install Chromium
        uses: browser-actions/setup-chrome@latest
      - name: setup Chromedriver
        uses: nanasess/setup-chromedriver@v1
        with:
        # Optional: do not specify to match Chrome's version
          chromedriver-version: '88.0.4324.96'
      - name: Run Accessability tests
        run: pytest --driver Chrome --driver-path .venv/lib/python3.10/site-packages/chromedriver_py/chromedriver_linux64
      - name: 'Upload Accessibility Testing reports'
        uses: actions/upload-artifact@v2
        with:
          name: accessibility-test-report
          path: /home/runner/work/funding-service-design-frontend/funding-service-design-frontend/axe_reports/*.html
          retention-days: 5

  deploy_dev:
    if: ${{ always() && (needs.testing-unit.result=='success' || needs.testing.result=='success') }}
    needs: [testing-unit, testing]
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - name: create python env
        run: python -m venv .venv
      - name: install dependencies
        run: source .venv/bin/activate && python -m pip install --upgrade pip && pip install -r requirements.txt
      - name: build static assets
        run: python build.py
      - name: download previous build
        uses: actions/download-artifact@v2
      - name: Deploy to Gov PaaS
        uses: citizen-of-planet-earth/cf-cli-action@v2
        with:
          cf_api:      ${{secrets.CF_API}}
          cf_org:      ${{secrets.CF_ORG}}
          cf_space:    ${{secrets.CF_SPACE }}
          cf_username: ${{secrets.CF_USER}}
          cf_password: ${{secrets.CF_PASSWORD}}
          command: push ${{inputs.app_name}}-dev

  security:
    needs: deploy_dev
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - name: install dependencies
        run: python -m pip install --upgrade pip && python -m pip install -r requirements.txt
      - name: Bandit
        run: bandit -r ./app
      - name: Safety
        run: safety check
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: 'https://${{inputs.app_name}}-dev.london.cloudapps.digital/'
          allow_issue_writing: False

  deploy_test:
    needs: security
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - name: create python env
        run: python -m venv .venv
      - name: install dependencies
        run: source .venv/bin/activate && python -m pip install --upgrade pip && pip install -r requirements.txt
      - name: build static assets
        run: python build.py
      - name: download previous build
        uses: actions/download-artifact@v2
      - name: Deploy to Gov PaaS
        uses: citizen-of-planet-earth/cf-cli-action@v2
        with:
          cf_api:      ${{secrets.CF_API}}
          cf_org:      ${{secrets.CF_ORG}}
          cf_space:    ${{secrets.CF_SPACE }}
          cf_username: ${{secrets.CF_USER}}
          cf_password: ${{secrets.CF_PASSWORD}}
          command: push ${{inputs.app_name}}-test

  run_performance_tests:
    needs: deploy_test
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: checkout code
        uses: actions/checkout@main
        with:
          repository: communitiesuk/funding-service-design-performance-tests
          path: ./funding-service-design-performance-tests
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - name: create python env
        run: python -m venv .venv
      - name: install dependencies
        run: source .venv/bin/activate && python -m pip install --upgrade pip && pip install -r ./funding-service-design-performance-tests/requirements.txt

      - name: Run performance tests
        run: ls && python -m pip install locust && python -m locust
        working-directory: ./funding-service-design-performance-tests
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: performance-test-report
          path: ./funding-service-design-performance-tests/locust_html_report.html
          retention-days: 5

        
